{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # to handle matrix and data operation\n",
    "import pandas as pd # to read csv and handle dataframe\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.utils.data\n",
    "from torch.autograd import Variable\n",
    "\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 785)\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('digit-recognizer/train.csv')\n",
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df['label'].values\n",
    "X = df.drop(['label'],1).values\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6300,)\n"
     ]
    }
   ],
   "source": [
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([35700, 1, 28, 28])\n",
      "torch.Size([6300, 1, 28, 28])\n"
     ]
    }
   ],
   "source": [
    "BATCH_SIZE = 32\n",
    "\n",
    "# ----- TRAIN ------\n",
    "torch_X_train = torch.from_numpy(X_train).type(torch.LongTensor)\n",
    "torch_y_train = torch.from_numpy(y_train).type(torch.LongTensor) # tipo de dato es long\n",
    "\n",
    "# ----- TEST ------\n",
    "torch_X_test = torch.from_numpy(X_test).type(torch.LongTensor)\n",
    "torch_y_test = torch.from_numpy(y_test).type(torch.LongTensor) # tipo de dato es long\n",
    "\n",
    "# hacer reshape\n",
    "torch_X_train = torch_X_train.view(-1, 1,28,28).float()\n",
    "torch_X_test = torch_X_test.view(-1,1,28,28).float()\n",
    "print(torch_X_train.shape)\n",
    "print(torch_X_test.shape)\n",
    "\n",
    "# Crear tipo train and test datasets\n",
    "train = torch.utils.data.TensorDataset(torch_X_train,torch_y_train)\n",
    "test = torch.utils.data.TensorDataset(torch_X_test,torch_y_test)\n",
    "\n",
    "# data loader\n",
    "train_loader = torch.utils.data.DataLoader(train, batch_size = BATCH_SIZE, shuffle = False)\n",
    "test_loader = torch.utils.data.DataLoader(test, batch_size = BATCH_SIZE, shuffle = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CNN(\n",
      "  (conv1): Conv2d(1, 32, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (fc1): Linear(in_features=576, out_features=256, bias=True)\n",
      "  (fc2): Linear(in_features=256, out_features=10, bias=True)\n",
      ")\n",
      "torch.Size([32, 10])\n"
     ]
    }
   ],
   "source": [
    "class CNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN, self).__init__()\n",
    "        # Conv2d porque es una imagen en 2d\n",
    "        # 32 porque lleva un padding de 1px en cada lado \n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=5)\n",
    "        self.conv2 = nn.Conv2d(32, 32, kernel_size=5)\n",
    "        self.conv3 = nn.Conv2d(32,64, kernel_size=5)\n",
    "        self.fc1 = nn.Linear(3*3*64, 256)\n",
    "        self.fc2 = nn.Linear(256, 10)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.conv1(x))\n",
    "        #x = F.dropout(x, p=0.5, training=self.training)\n",
    "        # layer de max pooling para reducir el tama√±o de la imagen y el numero de parametros\n",
    "        x = F.relu(F.max_pool2d(self.conv2(x), 2))\n",
    "        # para prevenir overfitting\n",
    "        x = F.dropout(x, p=0.5, training=self.training)\n",
    "        x = F.relu(F.max_pool2d(self.conv3(x),2))\n",
    "        x = F.dropout(x, p=0.5, training=self.training)\n",
    "        x = x.view(-1,3*3*64 )\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.dropout(x, training=self.training)\n",
    "        x = self.fc2(x)\n",
    "        return F.log_softmax(x, dim=1)\n",
    " \n",
    "cnn = CNN()\n",
    "print(cnn)\n",
    "\n",
    "it = iter(train_loader)\n",
    "X_batch, y_batch = next(it)\n",
    "print(cnn.forward(X_batch).shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit(model, train_loader):\n",
    "    optimizer = torch.optim.Adam(model.parameters())#,lr=0.001, betas=(0.9,0.999))\n",
    "    error = nn.CrossEntropyLoss()\n",
    "    EPOCHS = 5\n",
    "    model.train()\n",
    "    for epoch in range(EPOCHS):\n",
    "        correct = 0\n",
    "        for batch_idx, (X_batch, y_batch) in enumerate(train_loader):\n",
    "            var_X_batch = Variable(X_batch).float()\n",
    "            var_y_batch = Variable(y_batch)\n",
    "            optimizer.zero_grad()\n",
    "            output = model(var_X_batch)\n",
    "            loss = error(output, var_y_batch)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            # Total correct predictions\n",
    "            predicted = torch.max(output.data, 1)[1] \n",
    "            correct += (predicted == var_y_batch).sum()\n",
    "            #print(correct)\n",
    "            if batch_idx % 50 == 0:\n",
    "                print('Epoch : {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}\\t Accuracy:{:.3f}%'.format(\n",
    "                    epoch+1, batch_idx*len(X_batch), len(train_loader.dataset), 100.*batch_idx / len(train_loader), loss.data, float(correct*100) / float(BATCH_SIZE*(batch_idx+1))))\n",
    "                \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch : 0 [0/35700 (0%)]\tLoss: 5.586471\t Accuracy:21.875%\n",
      "Epoch : 0 [1600/35700 (4%)]\tLoss: 1.679084\t Accuracy:24.571%\n",
      "Epoch : 0 [3200/35700 (9%)]\tLoss: 0.661373\t Accuracy:44.090%\n",
      "Epoch : 0 [4800/35700 (13%)]\tLoss: 0.447320\t Accuracy:54.367%\n",
      "Epoch : 0 [6400/35700 (18%)]\tLoss: 0.430212\t Accuracy:61.194%\n",
      "Epoch : 0 [8000/35700 (22%)]\tLoss: 0.499331\t Accuracy:65.762%\n",
      "Epoch : 0 [9600/35700 (27%)]\tLoss: 0.156065\t Accuracy:69.207%\n",
      "Epoch : 0 [11200/35700 (31%)]\tLoss: 0.342380\t Accuracy:71.902%\n",
      "Epoch : 0 [12800/35700 (36%)]\tLoss: 0.368049\t Accuracy:73.979%\n",
      "Epoch : 0 [14400/35700 (40%)]\tLoss: 0.672015\t Accuracy:75.658%\n",
      "Epoch : 0 [16000/35700 (45%)]\tLoss: 0.477482\t Accuracy:77.164%\n",
      "Epoch : 0 [17600/35700 (49%)]\tLoss: 0.331888\t Accuracy:78.420%\n",
      "Epoch : 0 [19200/35700 (54%)]\tLoss: 0.138823\t Accuracy:79.508%\n",
      "Epoch : 0 [20800/35700 (58%)]\tLoss: 0.477982\t Accuracy:80.304%\n",
      "Epoch : 0 [22400/35700 (63%)]\tLoss: 0.324834\t Accuracy:81.103%\n",
      "Epoch : 0 [24000/35700 (67%)]\tLoss: 0.378411\t Accuracy:81.978%\n",
      "Epoch : 0 [25600/35700 (72%)]\tLoss: 0.097276\t Accuracy:82.631%\n",
      "Epoch : 0 [27200/35700 (76%)]\tLoss: 0.131097\t Accuracy:83.160%\n",
      "Epoch : 0 [28800/35700 (81%)]\tLoss: 0.239861\t Accuracy:83.719%\n",
      "Epoch : 0 [30400/35700 (85%)]\tLoss: 0.202727\t Accuracy:84.207%\n",
      "Epoch : 0 [32000/35700 (90%)]\tLoss: 0.172086\t Accuracy:84.653%\n",
      "Epoch : 0 [33600/35700 (94%)]\tLoss: 0.061905\t Accuracy:85.068%\n",
      "Epoch : 0 [35200/35700 (99%)]\tLoss: 0.434242\t Accuracy:85.468%\n",
      "Epoch : 1 [0/35700 (0%)]\tLoss: 0.209751\t Accuracy:90.625%\n",
      "Epoch : 1 [1600/35700 (4%)]\tLoss: 0.137485\t Accuracy:93.934%\n",
      "Epoch : 1 [3200/35700 (9%)]\tLoss: 0.093480\t Accuracy:93.998%\n",
      "Epoch : 1 [4800/35700 (13%)]\tLoss: 0.137064\t Accuracy:93.481%\n",
      "Epoch : 1 [6400/35700 (18%)]\tLoss: 0.205584\t Accuracy:93.284%\n",
      "Epoch : 1 [8000/35700 (22%)]\tLoss: 0.134588\t Accuracy:93.513%\n",
      "Epoch : 1 [9600/35700 (27%)]\tLoss: 0.159545\t Accuracy:93.563%\n",
      "Epoch : 1 [11200/35700 (31%)]\tLoss: 0.062877\t Accuracy:93.581%\n",
      "Epoch : 1 [12800/35700 (36%)]\tLoss: 0.075053\t Accuracy:93.610%\n",
      "Epoch : 1 [14400/35700 (40%)]\tLoss: 0.211291\t Accuracy:93.542%\n",
      "Epoch : 1 [16000/35700 (45%)]\tLoss: 0.167519\t Accuracy:93.706%\n",
      "Epoch : 1 [17600/35700 (49%)]\tLoss: 0.117462\t Accuracy:93.665%\n",
      "Epoch : 1 [19200/35700 (54%)]\tLoss: 0.100491\t Accuracy:93.802%\n",
      "Epoch : 1 [20800/35700 (58%)]\tLoss: 0.059647\t Accuracy:93.822%\n",
      "Epoch : 1 [22400/35700 (63%)]\tLoss: 0.069971\t Accuracy:93.884%\n",
      "Epoch : 1 [24000/35700 (67%)]\tLoss: 0.159980\t Accuracy:94.020%\n",
      "Epoch : 1 [25600/35700 (72%)]\tLoss: 0.051344\t Accuracy:94.023%\n",
      "Epoch : 1 [27200/35700 (76%)]\tLoss: 0.177568\t Accuracy:93.996%\n",
      "Epoch : 1 [28800/35700 (81%)]\tLoss: 0.042509\t Accuracy:94.052%\n",
      "Epoch : 1 [30400/35700 (85%)]\tLoss: 0.032140\t Accuracy:94.095%\n",
      "Epoch : 1 [32000/35700 (90%)]\tLoss: 0.075854\t Accuracy:94.196%\n",
      "Epoch : 1 [33600/35700 (94%)]\tLoss: 0.114485\t Accuracy:94.208%\n",
      "Epoch : 1 [35200/35700 (99%)]\tLoss: 0.082010\t Accuracy:94.250%\n",
      "Epoch : 2 [0/35700 (0%)]\tLoss: 0.011176\t Accuracy:100.000%\n",
      "Epoch : 2 [1600/35700 (4%)]\tLoss: 0.321364\t Accuracy:94.730%\n",
      "Epoch : 2 [3200/35700 (9%)]\tLoss: 0.037726\t Accuracy:95.080%\n",
      "Epoch : 2 [4800/35700 (13%)]\tLoss: 0.118954\t Accuracy:95.054%\n",
      "Epoch : 2 [6400/35700 (18%)]\tLoss: 0.058321\t Accuracy:94.636%\n",
      "Epoch : 2 [8000/35700 (22%)]\tLoss: 0.075309\t Accuracy:94.808%\n",
      "Epoch : 2 [9600/35700 (27%)]\tLoss: 0.292041\t Accuracy:94.934%\n",
      "Epoch : 2 [11200/35700 (31%)]\tLoss: 0.274446\t Accuracy:94.996%\n",
      "Epoch : 2 [12800/35700 (36%)]\tLoss: 0.053826\t Accuracy:95.028%\n",
      "Epoch : 2 [14400/35700 (40%)]\tLoss: 0.062917\t Accuracy:95.087%\n",
      "Epoch : 2 [16000/35700 (45%)]\tLoss: 0.413100\t Accuracy:95.079%\n",
      "Epoch : 2 [17600/35700 (49%)]\tLoss: 0.062586\t Accuracy:95.111%\n",
      "Epoch : 2 [19200/35700 (54%)]\tLoss: 0.047804\t Accuracy:95.144%\n",
      "Epoch : 2 [20800/35700 (58%)]\tLoss: 0.051362\t Accuracy:95.123%\n",
      "Epoch : 2 [22400/35700 (63%)]\tLoss: 0.117787\t Accuracy:95.132%\n",
      "Epoch : 2 [24000/35700 (67%)]\tLoss: 0.408417\t Accuracy:95.152%\n",
      "Epoch : 2 [25600/35700 (72%)]\tLoss: 0.286143\t Accuracy:95.213%\n",
      "Epoch : 2 [27200/35700 (76%)]\tLoss: 0.080172\t Accuracy:95.193%\n",
      "Epoch : 2 [28800/35700 (81%)]\tLoss: 0.047523\t Accuracy:95.162%\n",
      "Epoch : 2 [30400/35700 (85%)]\tLoss: 0.111648\t Accuracy:95.166%\n",
      "Epoch : 2 [32000/35700 (90%)]\tLoss: 0.066325\t Accuracy:95.192%\n",
      "Epoch : 2 [33600/35700 (94%)]\tLoss: 0.157009\t Accuracy:95.225%\n",
      "Epoch : 2 [35200/35700 (99%)]\tLoss: 0.247068\t Accuracy:95.226%\n",
      "Epoch : 3 [0/35700 (0%)]\tLoss: 0.020139\t Accuracy:100.000%\n",
      "Epoch : 3 [1600/35700 (4%)]\tLoss: 0.214699\t Accuracy:95.159%\n",
      "Epoch : 3 [3200/35700 (9%)]\tLoss: 0.409266\t Accuracy:95.173%\n",
      "Epoch : 3 [4800/35700 (13%)]\tLoss: 0.046444\t Accuracy:95.530%\n",
      "Epoch : 3 [6400/35700 (18%)]\tLoss: 0.105312\t Accuracy:95.476%\n",
      "Epoch : 3 [8000/35700 (22%)]\tLoss: 0.357732\t Accuracy:95.244%\n",
      "Epoch : 3 [9600/35700 (27%)]\tLoss: 0.137765\t Accuracy:95.266%\n",
      "Epoch : 3 [11200/35700 (31%)]\tLoss: 0.018137\t Accuracy:95.353%\n",
      "Epoch : 3 [12800/35700 (36%)]\tLoss: 0.038199\t Accuracy:95.332%\n",
      "Epoch : 3 [14400/35700 (40%)]\tLoss: 0.203439\t Accuracy:95.413%\n",
      "Epoch : 3 [16000/35700 (45%)]\tLoss: 0.696818\t Accuracy:95.390%\n",
      "Epoch : 3 [17600/35700 (49%)]\tLoss: 0.150768\t Accuracy:95.406%\n",
      "Epoch : 3 [19200/35700 (54%)]\tLoss: 0.104289\t Accuracy:95.450%\n",
      "Epoch : 3 [20800/35700 (58%)]\tLoss: 0.153486\t Accuracy:95.464%\n",
      "Epoch : 3 [22400/35700 (63%)]\tLoss: 0.031273\t Accuracy:95.475%\n",
      "Epoch : 3 [24000/35700 (67%)]\tLoss: 0.452118\t Accuracy:95.464%\n",
      "Epoch : 3 [25600/35700 (72%)]\tLoss: 0.247934\t Accuracy:95.471%\n",
      "Epoch : 3 [27200/35700 (76%)]\tLoss: 0.289099\t Accuracy:95.476%\n",
      "Epoch : 3 [28800/35700 (81%)]\tLoss: 0.034840\t Accuracy:95.436%\n",
      "Epoch : 3 [30400/35700 (85%)]\tLoss: 0.062314\t Accuracy:95.485%\n",
      "Epoch : 3 [32000/35700 (90%)]\tLoss: 0.157595\t Accuracy:95.483%\n",
      "Epoch : 3 [33600/35700 (94%)]\tLoss: 0.176848\t Accuracy:95.489%\n",
      "Epoch : 3 [35200/35700 (99%)]\tLoss: 0.445276\t Accuracy:95.473%\n",
      "Epoch : 4 [0/35700 (0%)]\tLoss: 0.153471\t Accuracy:96.875%\n",
      "Epoch : 4 [1600/35700 (4%)]\tLoss: 0.142002\t Accuracy:96.569%\n",
      "Epoch : 4 [3200/35700 (9%)]\tLoss: 0.110611\t Accuracy:96.349%\n",
      "Epoch : 4 [4800/35700 (13%)]\tLoss: 0.037533\t Accuracy:96.089%\n",
      "Epoch : 4 [6400/35700 (18%)]\tLoss: 0.083271\t Accuracy:95.818%\n",
      "Epoch : 4 [8000/35700 (22%)]\tLoss: 0.175708\t Accuracy:95.941%\n",
      "Epoch : 4 [9600/35700 (27%)]\tLoss: 0.102940\t Accuracy:95.951%\n",
      "Epoch : 4 [11200/35700 (31%)]\tLoss: 0.065782\t Accuracy:95.994%\n",
      "Epoch : 4 [12800/35700 (36%)]\tLoss: 0.047752\t Accuracy:95.955%\n",
      "Epoch : 4 [14400/35700 (40%)]\tLoss: 0.345411\t Accuracy:95.773%\n",
      "Epoch : 4 [16000/35700 (45%)]\tLoss: 0.195736\t Accuracy:95.696%\n",
      "Epoch : 4 [17600/35700 (49%)]\tLoss: 0.384482\t Accuracy:95.701%\n",
      "Epoch : 4 [19200/35700 (54%)]\tLoss: 0.023331\t Accuracy:95.736%\n",
      "Epoch : 4 [20800/35700 (58%)]\tLoss: 0.108054\t Accuracy:95.670%\n",
      "Epoch : 4 [22400/35700 (63%)]\tLoss: 0.139426\t Accuracy:95.591%\n",
      "Epoch : 4 [24000/35700 (67%)]\tLoss: 0.131870\t Accuracy:95.610%\n",
      "Epoch : 4 [25600/35700 (72%)]\tLoss: 0.320914\t Accuracy:95.591%\n",
      "Epoch : 4 [27200/35700 (76%)]\tLoss: 0.123797\t Accuracy:95.480%\n",
      "Epoch : 4 [28800/35700 (81%)]\tLoss: 0.170889\t Accuracy:95.418%\n",
      "Epoch : 4 [30400/35700 (85%)]\tLoss: 0.021068\t Accuracy:95.429%\n",
      "Epoch : 4 [32000/35700 (90%)]\tLoss: 0.150418\t Accuracy:95.430%\n",
      "Epoch : 4 [33600/35700 (94%)]\tLoss: 0.201261\t Accuracy:95.469%\n",
      "Epoch : 4 [35200/35700 (99%)]\tLoss: 0.292386\t Accuracy:95.493%\n"
     ]
    }
   ],
   "source": [
    "fit(cnn,train_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy:0.948% \n"
     ]
    }
   ],
   "source": [
    "def evaluate(model):\n",
    "#model = mlp\n",
    "    correct = 0 \n",
    "    for test_imgs, test_labels in test_loader:\n",
    "        #print(test_imgs.shape)\n",
    "        test_imgs = Variable(test_imgs).float()\n",
    "        output = model(test_imgs)\n",
    "        predicted = torch.max(output,1)[1]\n",
    "        correct += (predicted == test_labels).sum()\n",
    "    print(\"Test accuracy:{:.3f}% \".format( float(correct) / (len(test_loader)*BATCH_SIZE)))\n",
    "evaluate(cnn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
