# -*- coding: utf-8 -*-
"""Tarea3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cLd_FqDDrbQxpGGA2d8_VQvNcyDx08o7
"""



import numpy as np
import torch
import torch.optim as optim

"""# Respuestas: 

1.  Se tuvieron que cambiar los parametros del tensor, el numero de epochs y el learning rate. 
2. La optimizacion se mantuvo igual. 
3. En mi practica el loss fue mas bajo lleganod a un 2.90
4. Las w son bastante diferentes a lo esperado, por lo que en teoria fue peor.

## Solucion
"""

t_c = [0.5, 14.0, 15.0, 28.0, 11.0, 8.0, 3.0, -4.0, 6.0, 13.0, 21.0] # Temperatura en grados celsios
t_u = [35.7, 55.9, 58.2, 81.9, 56.3, 48.9, 33.9, 21.8, 48.4, 60.4, 68.4] # Unidades desconocidas
t_c = torch.tensor(t_c)
t_u = torch.tensor(t_u)

# Definimos el modelo 
def model(t_u, w1, w2,b):
    return w2 * t_u ** 2 + w1 * t_u + b


def loss_fn(t_p, t_c):
    squared_diffs = (t_p - t_c)**2
    return squared_diffs.mean()


  

def training_loop(model, n_epochs, optimizer, params, t_u, t_c):
    for epoch in range(1, n_epochs + 1):
        t_p = model(t_u, *params)
        loss = loss_fn(t_p, t_c)
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        if epoch % 200 == 0:
            print(f"Epoch {epoch}, Loss {loss}")
            
    return params

w1= torch.ones(1)
w2= torch.ones(1)

b = torch.zeros(1)

t_p = model(t_u, w1, w2, b)
t_p

loss = loss_fn(t_p, t_c)
loss

params = torch.tensor([1.0,1.0,  0.0], requires_grad=True)
learning_rate = 1e-1
optimizer = optim.Adam([params], lr=learning_rate) # Nuevo optimizador

training_loop(model,
              n_epochs=6000,
              optimizer=optimizer,
              params = params,
              t_u = t_u, # Regresamos a usar el t_u original como input
              t_c = t_c)



# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

t_p = model(t_u, *params)

fig = plt.figure(dpi=100)
plt.xlabel("Fahrenheit")
plt.ylabel("Celsius")
plt.plot(t_u.numpy(), t_p.detach().numpy())
plt.plot(t_u.numpy(), t_c.numpy(), 'o')